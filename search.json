[{"title":"Hello World","url":"/2024/11/12/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"0xGame_wp","url":"/2024/11/12/0xGame-wp/","content":"<h1 id=\"week1\"><a href=\"#week1\" class=\"headerlink\" title=\"week1\"></a>week1</h1><h2 id=\"BabyBase\"><a href=\"#BabyBase\" class=\"headerlink\" title=\"BabyBase\"></a>BabyBase</h2><p>ida打开附件，</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029214459625.png\" alt=\"image-20241029214459625\"></p>\n<p>发现有个checkflag函数，跟进：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029214524225.png\" alt=\"image-20241029214524225\"></p>\n<p>密文是base64格式，直接解密：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029214602880.png\" alt=\"image-20241029214602880\"></p>\n<p>这里使用的工具是CyberChef：<a href=\"https://cyberchef.org/\">https://cyberchef.org/</a></p>\n<h2 id=\"BinaryMaster\"><a href=\"#BinaryMaster\" class=\"headerlink\" title=\"BinaryMaster\"></a>BinaryMaster</h2><p>ida打开附件：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029214646035.png\" alt=\"image-20241029214646035\"></p>\n<p>直接看到flag了。</p>\n<h2 id=\"SignIn\"><a href=\"#SignIn\" class=\"headerlink\" title=\"SignIn\"></a>SignIn</h2><p>ida打开附件：<br><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029214834380.png\" alt=\"image-20241029214834380\"></p>\n<p>看到部分flag.</p>\n<p>shift+f12查看字符串：<br><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029214912291.png\" alt=\"image-20241029214912291\"></p>\n<p>可以看到flag了。</p>\n<h2 id=\"Xor-Beginning\"><a href=\"#Xor-Beginning\" class=\"headerlink\" title=\"Xor_Beginning\"></a>Xor_Beginning</h2><p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029215026438.png\" alt=\"image-20241029215026438\"></p>\n<p>v5是密文，和78-v7异或后得到flag.</p>\n<p>写代码解即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">v5 = [<span class=\"number\">0x7E</span>,<span class=\"number\">0x35</span>,<span class=\"number\">0x0B</span>,<span class=\"number\">0x2A</span>,<span class=\"number\">0x27</span>,<span class=\"number\">0x2C</span>,<span class=\"number\">0x33</span>,<span class=\"number\">0x1F</span>,<span class=\"number\">0x76</span>,<span class=\"number\">0x37</span>,<span class=\"number\">0x1B</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x31</span>,<span class=\"number\">0x1E</span>,<span class=\"number\">0x36</span>,<span class=\"number\">0x0C</span>,<span class=\"number\">0x4C</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x63</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x57</span>,<span class=\"number\">0x49</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x42</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0x5A</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x13</span>,<span class=\"number\">0x4C</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>):</span><br><span class=\"line\">    v5[i] ^= <span class=\"number\">78</span>-i</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(v5[i]),end = <span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Xor-Endian\"><a href=\"#Xor-Endian\" class=\"headerlink\" title=\"Xor_Endian\"></a>Xor_Endian</h2><p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029220944985.png\" alt=\"image-20241029220944985\"></p>\n<p>可以动调获得密文，或者手动拆开。手动拆开的话注意端序。</p>\n<p>加密函数就是把输入跟key进行循环异或，写代码解密即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">enc = [  <span class=\"number\">0x7B</span>, <span class=\"number\">0x1D</span>, <span class=\"number\">0x3E</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x22</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x0A</span>,</span><br><span class=\"line\">  <span class=\"number\">0x51</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0x4B</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x05</span>,</span><br><span class=\"line\">  <span class=\"number\">0x40</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x1D</span>, <span class=\"number\">0x04</span>,</span><br><span class=\"line\">  <span class=\"number\">0x55</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x0B</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0x0B</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">  <span class=\"number\">0x01</span>, <span class=\"number\">0x4F</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">key = <span class=\"string\">b&#x27;Key0xGame2024&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(enc)):</span><br><span class=\"line\">  enc[i] ^= key[i%<span class=\"built_in\">len</span>(key)]</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(enc[i]),end = <span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"week2\"><a href=\"#week2\" class=\"headerlink\" title=\"week2\"></a>week2</h1><h2 id=\"BabyUPX\"><a href=\"#BabyUPX\" class=\"headerlink\" title=\"BabyUPX\"></a>BabyUPX</h2><p>使用die查壳：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029221648312.png\" alt=\"image-20241029221648312\"></p>\n<p>发现加了upx的壳，使用工具脱壳。GitHub上搜索upx即可下载到工具。</p>\n<p>使用指令<code>UPX -d 文件名</code>即可脱壳：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029221757739.png\" alt=\"image-20241029221757739\"></p>\n<p>脱壳后使用ida打开附件：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029222112039.png\" alt=\"image-20241029222112039\"></p>\n<p>跟进encode函数：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029222220263.png\" alt=\"image-20241029222220263\"></p>\n<p>左移4位与上右移4位，是rol算法，也就是把低四位和高四位交换了位置。</p>\n<p>用cyberchef直接解密即可：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029222445181.png\" alt=\"image-20241029222445181\"></p>\n<h2 id=\"EzJar\"><a href=\"#EzJar\" class=\"headerlink\" title=\"EzJar\"></a>EzJar</h2><p>java逆向，使用jadx打开附件：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029222648157.png\" alt=\"image-20241029222648157\"></p>\n<p>直接可以看到flag.</p>\n<h2 id=\"EzPyc\"><a href=\"#EzPyc\" class=\"headerlink\" title=\"EzPyc\"></a>EzPyc</h2><p>题目给的是pyc文件，可以使用uncompyle6进行反编译，或者使用在线反编译。</p>\n<h6 id=\"uncompyle6：\"><a href=\"#uncompyle6：\" class=\"headerlink\" title=\"uncompyle6：\"></a>uncompyle6：</h6><p><code>pip install uncompyle6</code>安装uncompyle6。</p>\n<p>使用<code>uncompyle6 -d 文件名 &gt; output.py</code>进行反编译并将结果输出到output.py中。</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029223849511.png\" alt=\"image-20241029223849511\"></p>\n<p>可以看到源代码，只要通过第一个对输入的判断就会自动输出flag.</p>\n<p>直接复制粘贴代码，然后运行，输入Ciallo~即可得到flag.</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029224024628.png\" alt=\"image-20241029224024628\"></p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029224030981.png\" alt=\"image-20241029224030981\"></p>\n<h6 id=\"在线反编译：\"><a href=\"#在线反编译：\" class=\"headerlink\" title=\"在线反编译：\"></a>在线反编译：</h6><p><a href=\"https://tool.lu/pyc\">python反编译 - 在线工具</a></p>\n<p>选择文件，选择附件进行反编译即可看到源码，之后上面相同。</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241029224134792.png\" alt=\"image-20241029224134792\"></p>\n<h2 id=\"ZzZ\"><a href=\"#ZzZ\" class=\"headerlink\" title=\"ZzZ\"></a>ZzZ</h2><p>ida打开附件：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241030220534049.png\" alt=\"image-20241030220534049\"></p>\n<p>找不到main函数，因为程序去除了符号表。</p>\n<p>shift+f12尝试找到主函数使用了的字符串：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241030220628806.png\" alt=\"image-20241030220628806\"></p>\n<p>明显看到有提示flag格式的字符串，点进去按x交叉引用一下看看有什么函数使用了他：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241030220706048.png\" alt=\"image-20241030220706048\"></p>\n<p>跟进：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241030220720506.png\" alt=\"image-20241030220720506\"></p>\n<p>看到主函数了。</p>\n<p>flag被拆成了5个部分，其中第一个和第五个部分直接给了，中间三个进行了一系列计算来判断。</p>\n<p>这里使用python的z3约束求解器求解。</p>\n<p><a href=\"https://ctf-wiki.org/reverse/tools/constraint/z3/\">z3 - CTF Wiki</a></p>\n<p>使用指令<code>pip install z3-solver</code>进行安装。</p>\n<p>因为格式化输入的in3,in4,in5都是%4s,即长度为4的字符串，这里变量定义的时候使用BitVec,长度设置为32（4*8）</p>\n<p>注意求解之前要先s.check()一下，检查是否有解，然后再s.model()得到答案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> z3 <span class=\"keyword\">import</span> *</span><br><span class=\"line\">in2 = BitVec(<span class=\"string\">&#x27;in2&#x27;</span>,<span class=\"number\">32</span>)</span><br><span class=\"line\">in3 = BitVec(<span class=\"string\">&#x27;in3&#x27;</span>,<span class=\"number\">32</span>)</span><br><span class=\"line\">in4 = BitVec(<span class=\"string\">&#x27;in4&#x27;</span>,<span class=\"number\">32</span>)</span><br><span class=\"line\">s = Solver()</span><br><span class=\"line\">s.add(<span class=\"number\">11</span> * in3 + <span class=\"number\">14</span> * in2 - in4 == <span class=\"number\">0x48FB41DDD</span>)</span><br><span class=\"line\">s.add(<span class=\"number\">9</span> * in2 - <span class=\"number\">3</span> * in3 + <span class=\"number\">4</span> * in4 == <span class=\"number\">0x2BA692AD7</span>)</span><br><span class=\"line\">s.add(((in4 - in3) &gt;&gt; <span class=\"number\">1</span>) + (in2 ^ <span class=\"number\">0x87654321</span>) == <span class=\"number\">3451779756</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.check())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.model())</span><br><span class=\"line\"><span class=\"comment\"># in2 = 842086455</span></span><br><span class=\"line\"><span class=\"comment\"># in4 = 1681208161</span></span><br><span class=\"line\"><span class=\"comment\"># in3 = 862073908</span></span><br><span class=\"line\"><span class=\"comment\"># print(in2.to_bytes(4,&#x27;little&#x27;))</span></span><br><span class=\"line\"><span class=\"comment\"># print(in3.to_bytes(4,&#x27;little&#x27;))</span></span><br><span class=\"line\"><span class=\"comment\"># print(in4.to_bytes(4,&#x27;little&#x27;))</span></span><br><span class=\"line\"><span class=\"comment\"># 0xGame&#123;e544267d-7812-44b3-a35d-d085a85201a4&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Xor-Random\"><a href=\"#Xor-Random\" class=\"headerlink\" title=\"Xor_Random\"></a>Xor_Random</h2><p>使用ida打开附件：</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241030223014401.png\" alt=\"image-20241030223014401\"></p>\n<p>使用c++写的，比较难看，大致就是用operator后面的运算符连接括号里的内容。</p>\n<p>有一个init_random()函数里面初始化了一个随机数，使用的是固定的种子，所以每一次运行都会生成固定的随机数串。所以用动调的方式获得随机数即可。</p>\n<p>注意这里对输入的flag长度进行了判断，去除flag头后长度应为30，不然随机数的种子会不懂，从而无法得到正确的答案。</p>\n<p><img src=\"C:\\Users\\22919\\AppData\\Roaming\\Typora\\typora-user-images\\image-20241030223658155.png\" alt=\"image-20241030223658155\"></p>\n<p>得到随机数后写代码解密即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">char</span> enc[] =&#123; <span class=\"number\">0x0C</span>,<span class=\"number\">0x4F</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x1F</span>,<span class=\"number\">0x4E</span>,<span class=\"number\">0x16</span>,<span class=\"number\">0x21</span>,<span class=\"number\">0x12</span>,<span class=\"number\">0x4B</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x4B</span></span><br><span class=\"line\">  ,<span class=\"number\">0x0A</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x1F</span>,<span class=\"number\">0x17</span>,<span class=\"number\">0x9</span>,<span class=\"number\">0x4F</span>,<span class=\"number\">0x7</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x21</span>,<span class=\"number\">0x5C</span>,<span class=\"number\">0x2C</span>,<span class=\"number\">0x1A</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0x1F</span>,<span class=\"number\">0x11</span>,<span class=\"number\">0x16</span>,<span class=\"number\">0x59</span>,<span class=\"number\">0x5A</span>&#125;;</span><br><span class=\"line\">      <span class=\"type\">int</span> key = <span class=\"number\">0x227b</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">30</span>;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        enc[i]^=key;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        enc[i] ^= key<span class=\"number\">+3</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">30</span>;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>,enc[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0xGame&#123;r4nd0m_i5_n0t_alw4ys_&#x27;Random&#x27;!&#125;</span></span><br></pre></td></tr></table></figure>\n\n"}]